// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Users {
  // id        Int      @id @default(autoincrement())
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id            String                @id @default(uuid())
  name          String
  price         Int
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  categoryId    String
  category      Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ProductFilter ProductFilterOption[]
}

model Category {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Products       Products[]
  FilterCategory FilterCategory[]
}

model Filter {
  id             String           @id @default(uuid())
  filter_name    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  FilterCategory FilterCategory[]
  FilterOptions  FilterOptions[]
}

model FilterCategory {
  id          String   @id @default(uuid())
  filter_id   String
  category_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  filter      Filter   @relation(fields: [filter_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model FilterOptions {
  id            String                @id @default(uuid())
  filter_id     String
  option_name   String
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  filter        Filter                @relation(fields: [filter_id], references: [id], onDelete: Cascade)
  ProductFilter ProductFilterOption[]
}

model ProductFilterOption {
  id               String        @id @default(uuid())
  product_id       String
  filter_option_id String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  product          Products      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  filterOption     FilterOptions @relation(fields: [filter_option_id], references: [id], onDelete: Cascade)

  @@unique([product_id, filter_option_id])
}
